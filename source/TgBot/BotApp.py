from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    BotCommand,
    ReplyKeyboardMarkup,
    KeyboardButton,
)

from source.TgBot.States import AddSourceStates
from source.Config import settings


class BotApp:
    def __init__(self):
        self.bot = Bot(
            token=settings.BOT_TOKEN,
            default=DefaultBotProperties(
                parse_mode="HTML",
            )
        )
        self.dispatcher = Dispatcher(storage=MemoryStorage())
        self.router = Router()
        self.dispatcher.include_router(self.router)
        self.__include_handlers()

    def __include_handlers(self):
        # --- –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π ---
        self.router.message.register(self.__start_handler, F.text == "/start")
        self.router.message.register(
            self.__licence_handler, F.text == "/licence"
        )
        self.router.message.register(self.__end_handler, F.text == "/end")
        self.router.message.register(
            self.__add_command_handler, F.text == "/add"
        )
        self.router.message.register(
            self.__remove_command_handler, F.text == "/remove"
        )
        self.router.message.register(
            self.__handle_source, AddSourceStates.waiting_for_source
        )
        self.router.message.register(
            self.__cancel_handler, F.text == "–û—Ç–º–µ–Ω–∞üî¥"
        )
        self.router.message.register(self.__message_handler)  # –•–µ–Ω–¥–ª–µ—Ä RAG

        # --- –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫, –∫–æ–ª–ª–±—ç–∫–∏ ---
        self.router.callback_query.register(self.__inline_button_handler)

    async def __start_handler(self, message: Message):
        await self.bot.set_my_commands([
            BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            BotCommand(command="/add", description="–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"),
            BotCommand(command="/remove", description="–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"),
            BotCommand(command="/end", description="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"),
            BotCommand(command="/licence", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Ü–µ–Ω–∑–∏–∏")
        ])

        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n\n"
            "<u>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</u>\n\n"
            "/add ‚Äî –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞,\n"
            "/remove ‚Äî –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è \n"
            "/end ‚Äî —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /licence.",
            reply_markup=ReplyKeyboardRemove()
        )

    @staticmethod
    async def __licence_handler(message: Message):
        await message.answer(
            "–ü—Ä–æ–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –ª–∏—Ü–µ–Ω–∑–∏–µ–π AGPL v3:\n"
            "https://www.gnu.org/licenses/agpl-3.0.txt"
        )

    @staticmethod
    async def __end_handler(message: Message):
        await message.answer(
            "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
            reply_markup=ReplyKeyboardRemove()
        )
        # TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î

    async def __add_command_handler(
        self, message: Message, state: FSMContext
    ):
        cancel_button = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞üî¥")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞üî¥':",
            reply_markup=cancel_button
        )
        await state.set_state(AddSourceStates.waiting_for_source)

    async def __cancel_handler(self, message: Message, state: FSMContext):
        await state.clear()
        await message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardRemove()
        )

    async def __handle_source(self, message: Message, state: FSMContext):
        if message.text == "–û—Ç–º–µ–Ω–∞üî¥":
            await self.__cancel_handler(message, state)
            return

        source_link = message.text

        # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫

        await message.answer(
            f"–ò—Å—Ç–æ—á–Ω–∏–∫ \"{source_link}\" –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()

    async def __get_channels(self):

        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        return [
            {"id": 101, "name": "–ö–∞–Ω–∞–ª 1"},
            {"id": 102, "name": "–ö–∞–Ω–∞–ª 2"},
            {"id": 103, "name": "–ö–∞–Ω–∞–ª 3"},
            {"id": 104, "name": "–ö–∞–Ω–∞–ª 4"},
            {"id": 105, "name": "–ö–∞–Ω–∞–ª 5"},
            {"id": 106, "name": "–ö–∞–Ω–∞–ª 6"},
            {"id": 107, "name": "–ö–∞–Ω–∞–ª 7"},
            {"id": 108, "name": "–ö–∞–Ω–∞–ª 8"},
        ]

    async def __remove_command_handler(self, message: Message):
        channels = await self.__get_channels()
        await self.__send_paginated_channels(message, channels, page=1)

    async def __send_paginated_channels(
        self,
        message: Message,
        channels,
        page: int
    ):
        items_per_page = 5
        start = (page - 1) * items_per_page
        end = start + items_per_page
        current_page_channels = channels[start:end]

        inline_keyboard = [
            [
                InlineKeyboardButton(
                    text=channel["name"],
                    callback_data=f"rm:{channel['id']}"
                )
            ]
            for channel in current_page_channels
        ]

        navigation_buttons = []
        if page > 1:
            navigation_buttons.append(InlineKeyboardButton(
                text="<<<", callback_data=f"page:{page - 1}"))
        if end < len(channels):
            navigation_buttons.append(InlineKeyboardButton(
                text=">>>", callback_data=f"page:{page + 1}"))
        if navigation_buttons:
            inline_keyboard.append(navigation_buttons)

        markup = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

        try:
            await message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=markup
            )
        except Exception:
            await message.delete()
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=markup
            )

    async def __inline_button_handler(self, callback_query: CallbackQuery):
        callback_data = callback_query.data
        if callback_data.startswith("rm:"):
            channel_id = int(callback_data.split(":")[1])

            # TODO: –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º channel_id

            await callback_query.message.edit_text(
                f"–ö–∞–Ω–∞–ª —Å ID {channel_id} –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω."
            )
        elif callback_data.startswith("page:"):
            page = int(callback_data.split(":")[1])
            channels = await self.__get_channels()
            await self.__send_paginated_channels(
                callback_query.message,
                channels,
                page
            )
        await callback_query.answer()

    @staticmethod
    async def __message_handler(message: Message):
        if not message.text:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                " –°—Ç–∏–∫–µ—Ä—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã"
                " —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è."
            )
            return

        # TODO: !!! –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è,
        # –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ë–î

        await message.answer(
            "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ RAG."
        )

    async def start(self):
        await self.dispatcher.start_polling(self.bot)
