import re

from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    BotCommand,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from source.MiddleWareResponseModels import RetrievalAugmentedResponse
from source.ResponseProcessing import push_task
from source.TgUI.States import AddSourceStates, ProcessingResponseStates
from source.Database.MongoHelper import MongoDBHelper
from source.Database.exceptions import *
from source.Logging import get_logger


# noinspection SpellCheckingInspection
# 19 may started implementing logging.
class AiogramBot:

    def __init__(self, token: str, db: MongoDBHelper):
        self.token = token
        self.storage = MemoryStorage()
        self.bot = Bot(token=token, default=DefaultBotProperties(
            parse_mode="HTML",
        ))
        self.dispatcher = Dispatcher(storage=self.storage)
        self.router = Router()
        self.dispatcher.include_router(self.router)
        self._handlers()
        self.aiogramm_logger = get_logger("AiogramBot", "network")
        self.db = db


    def _handlers(self):
        self.router.message.register(self._handle_start, F.text == "/start")
        self.router.message.register(self._handle_end, F.text == "/end")
        self.router.message.register(self._handle_license, F.text == "/license")
        self.router.message.register(self._handle_help, F.text == "/help")
        self.router.message.register(self._handle_add, F.text == "/add")
        self.router.message.register(self._handle_remove, F.text == "/remove")
        self.router.message.register(self._handle_source, AddSourceStates.waiting_for_source)
        self.router.message.register(self._handle_cancel, F.text == "–û—Ç–º–µ–Ω–∞üî¥")
        self.router.message.register(self._handle_message)
        self.router.callback_query.register(self._handle_callback)


    async def _handle_start(self, message: Message, state: FSMContext):
        if state.get_state() == ProcessingResponseStates.waiting_for_processing:
            await message.answer(
                "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, —è –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–∏–∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            )
            return
        await self.bot.set_my_commands(
            [
                BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å"),
                BotCommand(command="/help", description="–ü–æ–º–æ—â—å"),
                BotCommand(command="/add", description="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"),
                BotCommand(command="/remove", description="–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"),
                BotCommand(command="/end", description="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é"),
                BotCommand(command="/license", description="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ü–µ–Ω–∑–∏–∏"),
            ]
        )
        self.aiogramm_logger.info(f"User {message.from_user.first_name} started the bot.")

        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n\n"
            "<u>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</u>\n\n"
            "/add ‚Äî –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞,\n"
            "/remove ‚Äî –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è \n"
            "/end ‚Äî —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /licence.",
            reply_markup=ReplyKeyboardRemove()
        )

    @staticmethod
    async def _handle_license(message: Message, state: FSMContext):
        if state.get_state() == ProcessingResponseStates.waiting_for_processing:
            await message.answer(
                "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, —è –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–∏–∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            )
            return
        await message.answer(
            "–ü—Ä–æ–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –ª–∏—Ü–µ–Ω–∑–∏–µ–π AGPL v3:\n"
            "https://www.gnu.org/licenses/agpl-3.0.txt"
        )

    @staticmethod
    async def _handle_help(message: Message, state: FSMContext):
        if state.get_state() == ProcessingResponseStates.waiting_for_processing:
            await message.answer(
                "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, —è –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–∏–∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            )
            return

        await message.answer(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/add ‚Äî –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–∞—Å –ø–æ–ø—Ä–æ—Å—è—Ç –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞ https://t.me/your_channel\n"
            "/remove ‚Äî –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.\n"
            "/end ‚Äî —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /licence."
        )

    @staticmethod
    async def _handle_add(
            message: Message, state: FSMContext
    ):
        if state.get_state() == ProcessingResponseStates.waiting_for_processing:
            await message.answer(
                "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, —è –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–∏–∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            )
            return
        cancel_button = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞üî¥")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞üî¥':",
            reply_markup=cancel_button
        )
        await state.set_state(AddSourceStates.waiting_for_source)

    @staticmethod
    async def _handle_cancel( message: Message, state: FSMContext):
        await state.clear()
        await message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardRemove()
        )

    async def _handle_source(self, message: Message, state: FSMContext):
        if message.text == "–û—Ç–º–µ–Ω–∞üî¥":
            await self._handle_cancel(message, state)
            return

        source_link = message.text
        # Here we should validate the source link and add it to the database
        # If the link is valid, we can proceed, if not, we should inform the user
        if source_link.startswith("@"):
            channel_name = source_link[1:]
        else:
            channel_name = re.search(r"(?:https?://)?t\.me/([a-zA-Z0-9_]+)", source_link)

        self.aiogramm_logger.info(f"User {message.from_user.first_name} trying to add source {source_link}.")
        if not channel_name:
            channel_name = source_link
        # Here we validate if the name is indeed a channel
        try:
            chat = await self.bot.get_chat(f"@{channel_name.group(1)}")
        except Exception:
            self.aiogramm_logger.error(f"User {message.from_user.first_name} failed to add source {source_link}.")
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª.\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n"
                "–ï—Å–ª–∏ –∂–µ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∏–º–µ–Ω–∏ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë —Å–Ω–æ–≤–∞.\n"
            )
            return
        if chat.type != "channel" or chat.type != "supergroup":
            self.aiogramm_logger.error(f"User {message.from_user.first_name} added wrong type of source {source_link}.")
            await message.answer(
                "–°—Å—ã–ª–∫–∞ –Ω–µ –≤–µ–¥–µ—Ç –Ω–∞ –∫–∞–Ω–∞–ª. –°–µ—Ä–≤–∏—Å, –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥—Ä—É–ø–ø–∞–º–∏ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–∞–ø—Ä—è–º—É—é. \n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª –≤–∏–¥–∞ https://t.me/your_channel –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞üî¥'."
            )
            return
        # First validate if user exists in database, if not, create a new user
        try:
            await self.db.get_user(message.from_user.id)
        except UserNotFound:
            self.aiogramm_logger.info(f"User does {message.from_user.first_name} not exist in database. Creating new user.")
            await self.db.create_user(
                user_id=message.from_user.id,
                name=message.from_user.first_name
            )
            await message.answer(
                "–°—É–¥—è –ø–æ –≤—Å–µ–º—É –≤—ã –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
            )

        # Now we validate if the channel already exists in the database, if not, create a new entry
        try:
            await self.db.get_channel(chat.id)
        except ChannelNotFound:
            self.aiogramm_logger.info(f"Channel {chat.title} does not exist in database. Creating new channel.")
            try:
                await self.db.create_channel(chat.id, channel_name)
            except CannotEndTransaction as e:
                self.aiogramm_logger.error(f"Could not create channel {chat.title} in database. {e}")
                await message.answer(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n"
                )
                await self._handle_cancel(message, state)
                return


        # Now we add the channel to the user
        try:
            await self.db.add_for_user(message.from_user.id, chat.id)
        except ChannelsAlreadyPresentInUser:
            # if channel already present in user model we inform them
            await self.aiogramm_logger.warning(f"User {message.from_user.first_name} tried to add channel {chat.title} that already exists in his database record.")
            await message.answer(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n"
            )
            await self._handle_cancel(message, state)
            return
        except UserNotFound:
            # This should not happen, but just in case we inform the user
            # At least I hope so, because we already created a user above,
            # and this exception would mean that this is something with the database
            self.aiogramm_logger.critical(f"User cannot be found in database after creating it. {message.from_user.first_name}")
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑-–∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            )
            await self._handle_cancel(message, state)
            return
        # Now we inform the user that the channel was added successfully
        self.aiogramm_logger.info(f"User {message.from_user.first_name} added channel {chat.title} to his database record.")
        await message.answer(
            "–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /remove.\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add."
        )
        # Now we clear the state
        await state.clear()

    async def _hande_get(self, message: Message, state: FSMContext):
        # Handle get to present the list of sources user has saved
        # First, we validate if user exists in database.
        if state.get_state() == ProcessingResponseStates.waiting_for_processing:
            await message.answer(
                "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, —è –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–∏–∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            )
            return

        self.aiogramm_logger.info(f"User {message.from_user.first_name} trying to get sources.")
        try:
            user = await self.db.get_user(message.from_user.id)
        except UserNotFound:
            self.aiogramm_logger.info(f"User {message.from_user.first_name} not exist in database.")
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n"
            )
            return

        # Now we get the list of channels from the database
        channels = user.channels
        if not channels:
            # This one is strange condition, because, well, we create user only when they add a channel,
            # but just in case we inform the user. If, when testing, this happens, we should investigate
            self.aiogramm_logger.critical(f"User {message.from_user.first_name} has no channels in database. Must be a bug.")
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add."
            )
            return
        list_channels = list(channels.items())
        # Now we present the list of channels to the user
        await self._return_pages_from_get(message, list_channels, page=1)

    @staticmethod
    async def _return_pages_from_get(message: Message, channels: list, page: int):
        items_per_page = 5
        start = (page - 1) * items_per_page
        end = start + items_per_page
        if end >= len(channels):
            end = len(channels) - 1
        current_channels = channels[start:end]
        keyboard = []
        # Firstly, we must build the inline keyboard for navigation
        navigation_buttons = [[]]
        if page > 1:
            navigation_buttons[0].append(InlineKeyboardButton(
                text="<--", callback_data=f":get:page:{page - 1}:channels:{channels}"))
        if end < len(channels) - 1:
            navigation_buttons[0].append(InlineKeyboardButton(
                text="-->", callback_data=f":get:page:{page + 1}:channels:{channels}"))
        if navigation_buttons:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=navigation_buttons
            )
        try:
            await message.answer(
                f"–í–∞—à —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n {'\n'.join([channel[1] for channel in current_channels])}\n\n",
                reply_markup=keyboard
            )
        except Exception:
            await message.delete()
            await message.answer(
                f"–í–∞—à —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n {'\n'.join([channel[1] for channel in current_channels])}\n\n",
                reply_markup=keyboard
            )


    async def _handle_get_for_removal(self, user_id: int):
        # Here we get the list of channels from the database
        try:
            user = await self.db.get_user(user_id)
        except UserNotFound:
            return None
        # Now we get the list of channels from the database
        channels = user.channels
        if not channels:
            # This one is strange condition, because, well, we create user only when they add a channel,
            return None
        channels_list = list(channels.items())
        return channels_list

    async def _handle_remove(self, message: Message, state: FSMContext):
        # Handle remove to present the list of sources user has saved
        if state.get_state() == ProcessingResponseStates.waiting_for_processing:
            await message.answer(
                "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, —è –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–∏–∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            )
            return
        channels = await self._handle_get_for_removal(message.from_user.id)
        if not channels:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add."
            )
            return
        await self._return_pages(message, channels, page=1)

    @staticmethod
    async def _return_pages(message: Message, channels: list, page: int):
        items_per_page = 5
        start = (items_per_page * (page - 1))
        end = start + items_per_page
        if end >= len(channels):
            end = len(channels) - 1
        current_channels = channels[start:end]
        inline_keyboard = [
            [
                InlineKeyboardButton(
                    text=channel[1],
                    callback_data=f"from_user:{message.from_user.id}:remove:{channel}"
                )
            ]
            for channel in current_channels
        ]
        navigation_buttons = []
        if page > 1:
            navigation_buttons.append(InlineKeyboardButton(
                text="<--", callback_data=f"page:{page - 1}:channels:{channels}"))
        if end < len(channels) - 1:
            navigation_buttons.append(InlineKeyboardButton(
                text="-->", callback_data=f"page:{page + 1}:channels:{channels}"))
        if navigation_buttons:
            inline_keyboard.append(navigation_buttons)

        markup = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
        try:
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=markup
            )
        except Exception:
            await message.delete()
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=markup
            )

    async def _handle_callback(self, callback: CallbackQuery):
        data = callback.data
        if data.startswith("from_user:"):
            _, user_id, action, channel_id = data.split(":")
            if action == "remove":
                channel = eval(channel_id)
                try:
                    await self.db.remove_for_user(callback.message.from_user.id, channel[0])
                    await callback.message.answer(
                        "–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n"
                    )
                except UserNotFound:
                    # This should not happen, but just in case we inform the user
                    await callback.message.answer(
                        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑-–∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
                    )
                except ChannelsNotPresentInUser:
                    # Same applies here, though this is more likely to happen
                    await callback.message.answer(
                        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã —É–∂–µ —É–¥–∞–ª–∏–ª–∏ –µ–≥–æ.\n"
                    )
        if data.startswith("page:"):
            _, page, action, channels = data.split(":")
            if action == "channels":
                channels = eval(channels)
                await self._return_pages(callback.message, channels, int(page))
        if data.startswith(":get:page:"):
            _, page, action, channels = data.split(":")
            if action == "channels":
                channels = eval(channels)
                await self._return_pages_from_get(callback.message, channels, int(page))

        if data.startswith("delete_account:"):
            _, user_id = data.split(":")
            if user_id == "skip_it":
                await callback.message.answer(
                    "–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
                )
                return
            try:
                await self.db.delete_user(int(user_id))
                await callback.message.answer(
                    "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å, "
                    "–ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add.\n"
                )
            except UserNotFound:
                await callback.message.answer(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑-–∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
                )

        await callback.answer()

    async def _handle_message(self, message: Message, state: FSMContext):
        # Here we handle message that does not start with a command symbol
        if state.get_state() == ProcessingResponseStates.waiting_for_processing:
            await message.answer(
                "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, —è –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–∏–∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            )
            return
        if not message.text:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É."
                "–°–µ—Ä–≤–∏—Å –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç–∏–∫–µ—Ä—ã, —Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
            )
            return
        if message.from_user.id == message.bot.id:
            await message.answer(
                "–ß–µ—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ –∏–∑–≤–∏–Ω—è—é—Å—å, –Ω–æ —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ–±—è.\n"
            )
            return

        if "–∏–≥–Ω–æ—Ä–∏—Ä—É–π –ø—Ä–æ—à–ª—ã–µ –∫–æ–º–∞–Ω–¥—ã" in message.text.lower():
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –∑–∞–ª–æ–∂–µ–Ω–æ –≤ –º–æ—é —Å–∏—Å—Ç–µ–º—É.\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å."
            )
        try:
            user = await self.db.get_user(message.from_user.id)
        except UserNotFound:
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n"
            )
            return
        self.aiogramm_logger.info(f"Started processing RAG request from user {message.from_user.first_name} with message: {message.text}")
        query = message.text.lower()
        channels = user.channels
        if not channels:
            # This one is strange condition, because, well, we create user only when they add a channel,
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add."
            )
            return

        channel_names = list(channels.values())
        response = RetrievalAugmentedResponse(
            user_name=user.name,
            query=query,
            channel_names=channel_names,
        )
        # Push task to available executor
        #TODO:  DONT FORGET TO SET_NEXT TO CRAWLER, BECAUSE IF NOT THE TASK WILL NOT EXECUTE AT ALL
        push_task(response)

        await message.answer(
            "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.\n"
        )
        self.aiogramm_logger.info(f"Pushed from {message.from_user.first_name} task to middleware processing executor.")
        await state.set_state(ProcessingResponseStates.waiting_for_processing)
        try:
            result = await response.result_async()
            await state.clear()
        except Exception:
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
            )
            await state.clear()
            return

        self.aiogramm_logger.info(f"Result arrived {message.from_user.first_name} with message: {result[:50]}")

        if isinstance(result, str):
            await message.answer(result)
        else:
            self.aiogramm_logger.critical(f"Result arrived is not a string. {result}. Must be a bug.")
            await message.answer(
                "–ò–∑-–∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏ —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
            )


    async def _handle_end(self, message: Message):
        # Here we ask for assurance before deleting the account
        self.aiogramm_logger.info(f"User {message.from_user.first_name} trying to delete account.")
        await message.answer(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –Ω–∞–∂–∞–≤ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–î–∞",
                            callback_data=f"delete_account:{message.from_user.id}"
                        ),
                        InlineKeyboardButton(
                            text="–ù–µ—Ç",
                            callback_data=f"delete_account:skip_it:"
                        )
                    ]
                ]
            )
        )


    async def start(self):
        self.aiogramm_logger.info(f"Starting Aiogram bot.")
        await self.dispatcher.start_polling()
