from typing import Optional

from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    BotCommand,
    ReplyKeyboardMarkup,
    KeyboardButton,
)

from source.TgUI.States import AddSourceStates
from source.Core import Logger
from source.Database.DBHelper import DataBaseHelper
from source.Chroma–êndRAG.ChromaClient import RagClient
import re, asyncio
telegram_ui_logger = Logger("TelegramUI", "network.log")


class BotApp:
    def __init__(self, token: str,db_helper: DataBaseHelper, rag: RagClient):
        self.bot = Bot(
            token=token,
            default=DefaultBotProperties(
                parse_mode="HTML",
            )
        )
        self.dispatcher = Dispatcher(storage=MemoryStorage())
        self.router = Router()
        self.dispatcher.include_router(self.router)
        self.__include_handlers()

        self.DataBaseHelper = db_helper
        self.RagClient = rag

        self.request_queueue = asyncio.Queue()
        self.response_queue = asyncio.Queue()

        self._request_task: Optional[asyncio.Task] = None
        self._response_task: Optional[asyncio.Task] = None

    def __include_handlers(self):
        # --- –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π ---
        self.router.message.register(self.__start_handler, F.text == "/start")
        self.router.message.register(
            self.__licence_handler, F.text == "/licence"
        )
        self.router.message.register(self.__end_handler, F.text == "/end")
        self.router.message.register(
            self.__add_command_handler, F.text == "/add"
        )
        self.router.message.register(
            self.__remove_command_handler, F.text == "/remove"
        )
        self.router.message.register(self.__get_channels, F.text == "/get_channels")
        self.router.message.register(
            self.__handle_source, AddSourceStates.waiting_for_source
        )
        self.router.message.register(
            self.__cancel_handler, F.text == "–û—Ç–º–µ–Ω–∞üî¥"
        )
        self.router.message.register(self.__message_handler)  # –•–µ–Ω–¥–ª–µ—Ä RAG

        # --- –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫, –∫–æ–ª–ª–±—ç–∫–∏ ---
        self.router.callback_query.register(self.__inline_button_handler)

    async def __start_handler(self, message: Message):
        await telegram_ui_logger.info(f"User {message.from_user.id} started the bot.")

        await self.bot.set_my_commands([
            BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            BotCommand(command="/add", description="–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"),
            BotCommand(command="/remove", description="–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"),
            BotCommand(command="/end", description="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"),
            BotCommand(command="/licence", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Ü–µ–Ω–∑–∏–∏")
        ])

        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n\n"
            "<u>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</u>\n\n"
            "/add ‚Äî –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞,\n"
            "/remove ‚Äî –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è \n"
            "/end ‚Äî —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /licence.",
            reply_markup=ReplyKeyboardRemove()
        )

    @staticmethod
    async def __licence_handler(message: Message):
        await message.answer(
            "–ü—Ä–æ–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –ª–∏—Ü–µ–Ω–∑–∏–µ–π AGPL v3:\n"
            "https://www.gnu.org/licenses/agpl-3.0.txt"
        )


    async def __end_handler(self, message: Message):
        await message.answer(
            "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
            reply_markup=ReplyKeyboardRemove()
        )
        await self.DataBaseHelper.delete_user(message.from_user.id)

    @staticmethod
    async def __add_command_handler(
        message: Message, state: FSMContext
    ):
        cancel_button = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞üî¥")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞üî¥':",
            reply_markup=cancel_button
        )
        await state.set_state(AddSourceStates.waiting_for_source)

    @staticmethod
    async def __cancel_handler( message: Message, state: FSMContext):
        await state.clear()
        await message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardRemove()
        )

    async def __handle_source(self, message: Message, state: FSMContext):
        if message.text == "–û—Ç–º–µ–Ω–∞üî¥":
            await self.__cancel_handler(message, state)
            return

        source_link = message.text

        # Get channel id from the link
        channel_name = re.search(r"(?:https?://)?t\.me/([a-zA-Z0-9_]+)", source_link)
        if not channel_name:
            await message.answer(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            await self.__cancel_handler(message, state)
            return

        channel_chat = await self.bot.get_chat(f"@{channel_name.group(1)}")
        if not channel_chat:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            await self.__cancel_handler(message, state)
            return
        channel_id = channel_chat.id
        try:
            await self.DataBaseHelper.get_user(message.from_user.id)
        except ValueError:
            await self.DataBaseHelper.create_user(
                message.from_user.id,
                message.from_user.first_name
            )

        try:
            await self.DataBaseHelper.update_user_channels(
                message.from_user.id,
                add=[channel_id]
            )
        except ValueError:
            try:
                await self.DataBaseHelper.create_channel(channel_id, channel_chat.first_name)
                await self.DataBaseHelper.update_user_channels(
                    message.from_user.id,
                    add=[channel_id]
                )
            except ValueError:
                await message.answer(
                    "–ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –µ–≥–æ —Ä–∞–Ω–µ–µ."
                )
                await self.__cancel_handler(message, state)
                return

        await message.answer(
            f"–ò—Å—Ç–æ—á–Ω–∏–∫ \"{source_link}\" –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()

    async def __get_channels(self, message: Message):
        try:
            user = await self.DataBaseHelper.get_user(message.from_user.id)
        except ValueError:
            await message.answer(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
            )
            return None


        user_channels = user.channels
        channel_names = []
        for channel in user_channels:
            chat = await self.bot.get_chat(channel)
            if chat:
                channel_names.append(f"id: {channel}, –ò–º—è: {chat.first_name}")
            else:
                channel_names.append(f"id: {channel}, –ò–º—è: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
        await message.answer(
            "–í–∞—à–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join(channel_names),
            reply_markup=ReplyKeyboardRemove()
        )
        return None

    async def __get_channels_internal(self, user_id: int):
        try:
            user = await self.DataBaseHelper.get_user(user_id)
        except ValueError:
            return None

        user_channels = user.channels
        channel_names = []
        for channel in user_channels:
            chat = await self.bot.get_chat(channel)
            if chat:
                channel_names.append({"id": channel, "name": chat.first_name})
            else:
                channel_names.append({"id": channel, "name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"})

        return channel_names


    async def __remove_command_handler(self, message: Message):
        channels = await self.__get_channels_internal(message.from_user.id)
        if not channels:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫."
            )
            return
        await self.__send_paginated_channels(message, channels, page=1)

    @staticmethod
    async def __send_paginated_channels(
        message: Message,
        channels,
        page: int
    ):
        items_per_page = 5
        start = (page - 1) * items_per_page
        end = start + items_per_page
        current_page_channels = channels[start:end]

        inline_keyboard = [
            [
                InlineKeyboardButton(
                    text=channel["name"],
                    callback_data=f"usr:{message.from_user.id} rm:{channel['id']}"
                )
            ]
            for channel in current_page_channels
        ]

        navigation_buttons = []
        if page > 1:
            navigation_buttons.append(InlineKeyboardButton(
                text="<<<", callback_data=f"page:{page - 1}"))
        if end < len(channels):
            navigation_buttons.append(InlineKeyboardButton(
                text=">>>", callback_data=f"page:{page + 1}"))
        if navigation_buttons:
            inline_keyboard.append(navigation_buttons)

        markup = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

        try:
            await message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=markup
            )
        except Exception:
            await message.delete()
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=markup
            )

    async def __inline_button_handler(self, callback_query: CallbackQuery):
        callback_data = callback_query.data
        if callback_data.startswith("usr:"):
            usr_str, channel_str = callback_data.split(" ")
            user_id = int(usr_str.split(":")[1])
            channel_id = int(channel_str.split(":")[1])
            try:
                await self.DataBaseHelper.update_user_channels(
                    user_id,
                    remove=[channel_id]
                )
                await callback_query.message.edit_text(
                    f"–ö–∞–Ω–∞–ª —Å ID {channel_id} –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω."
                )
            except ValueError:
                await callback_query.message.edit_text(
                    f"–ö–∞–Ω–∞–ª —Å ID {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
        elif callback_data.startswith("page:"):
            page = int(callback_data.split(":")[1])
            channels = await self.__get_channels_internal(user_id=callback_query.from_user.id)
            await self.__send_paginated_channels(
                callback_query.message,
                channels,
                page
            )
        await callback_query.answer()


    async def __message_handler(self, message: Message):
        if not message.text:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                " –°—Ç–∏–∫–µ—Ä—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã"
                " —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è."
            )
            return
        if message.from_user.id == self.bot.id:
            await message.answer(
                "–ß–µ—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ –∏–∑–≤–∏–Ω—è—é—Å—å, –Ω–æ —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ–±—è."
            )
            return

        try:
            user = await self.DataBaseHelper.get_user(message.from_user.id)
        except ValueError:
            await telegram_ui_logger.error("Could not get user from DB.")
            await message.answer(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
            )
            return

        user_channels: list[int] = user.channels
        if not user_channels:
            await telegram_ui_logger.error("User has no channels. Or there is something wrong with DB.")
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫."
            )
            return


        # TODO: !!! –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è,
        # –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ë–î
        await self.request_queueue.put((message.from_user.id, message.text, user_channels))

        await message.answer(
            "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ RAG."
        )

    async def __request_loop(self):
        while True:
            user_id, request, channel_ids = await self.request_queueue.get()
            await telegram_ui_logger.info(f"Started processing RAG request for {user_id} with request: {request}.")
            await self.RagClient.query(user_id, request, channel_ids)

    async def __response_loop(self):
        while True:
            user_id, response = await self.RagClient.rag_response_queue.get()
            await telegram_ui_logger.info(f"Got response from RAG for {user_id}")
            try:
                await self.bot.send_message(user_id, response)
            except Exception as e:
                await telegram_ui_logger.error(f"Failed to send message to {user_id}: {e}")






    async def start(self):
        await self.dispatcher.start_polling(self.bot)
        self._request_task = asyncio.create_task(self.__request_loop())
        self._response_task = asyncio.create_task(self.__response_loop())

    async def stop(self):
        if self._request_task:
            self._request_task.cancel()
            try:
                await self._request_task
            except asyncio.CancelledError:
                pass

        if self._response_task:
            self._response_task.cancel()
            try:
                await self._response_task
            except asyncio.CancelledError:
                pass
        await self.bot.session.close()